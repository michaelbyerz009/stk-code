uniform sampler2D source;
uniform layout(rgba16f) restrict writeonly image2D dest;
uniform vec2 pixel;
uniform float sigma;

// Gaussian separated blur with radius 6.

layout (local_size_x = 8, local_size_y = 8) in;

shared vec3 local_src[8][8 + 2 * 8];

void main()
{
    int x = int(gl_LocalInvocationID.x), y = int(gl_LocalInvocationID.y);
    ivec2 iuv = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 uv_m = (iuv - ivec2(0, 8)) * pixel;
    vec2 uv = iuv * pixel;
    vec2 uv_p = (iuv + ivec2(0, 8)) * pixel;

    local_src[x][y] = texture(source, uv_m).rgb;
    local_src[x][y + 8] = texture(source, uv).rgb;
    local_src[x][y + 16] = texture(source, uv_p).rgb;

    barrier();

    float g0, g1, g2;
    g0 = 1.0 / (sqrt(2.0 * 3.14) * sigma);
    g1 = exp(-0.5 / (sigma * sigma));
    g2 = g1 * g1;
    vec3 sum = local_src[x][y + 8] * g0;
    g0 *= g1;
    g1 *= g2;
    for (int i = 1; i < 6; i++) {
        sum += local_src[x][8 + y - i] * g0;
        sum += local_src[x][8 + y + i] * g0;
        g0 *= g1;
        g1 *= g2;
    }

    imageStore(dest, iuv, vec4(sum, 0.));
}
